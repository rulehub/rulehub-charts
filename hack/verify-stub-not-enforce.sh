#!/usr/bin/env bash
set -euo pipefail
# verify-stub-not-enforce.sh
# Verifies that deprecated stub policies are NOT enforced.
# Scope: Kyverno stubs (ClusterPolicy) generated or marked as deprecated stubs and Gatekeeper stubs.
# Rules:
#   * A stub (autogenerated deprecated stub) MUST NOT declare spec.validationFailureAction: enforce.
#   * A values.yaml override for a deprecated key MUST NOT set validationFailureAction: enforce.
#   * (Warn) A deprecated key should normally be disabled (enabled: false); warn if still enabled.
# Detection (same heuristics as verify-soft-deletion):
#   * Contains comment 'autogenerated deprecated stub' OR annotation rulehub.deprecated: "true"
#   * And one of:
#       - Kyverno: kind ClusterPolicy AND rules: []
#       - Gatekeeper: kind DeprecatedStubConstraint OR spec: {}
# Exit codes: 0 success, 1 violations, 2 usage error.

VALUES_FILE="values.yaml"
QUIET=0

usage() {
  cat >&2 <<EOF
Usage: $0 [--values values.yaml] [--quiet]
Ensures deprecated stub policies are not enforced (no validationFailureAction: enforce overrides).
EOF
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --values) VALUES_FILE=$2; shift 2;;
    --quiet) QUIET=1; shift;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown arg: $1" >&2; usage; exit 2;;
  esac
done

log() { if [[ $QUIET -eq 0 ]]; then echo "$*" >&2; fi }

if [[ ! -f $VALUES_FILE ]]; then
  echo "Values file not found: $VALUES_FILE" >&2; exit 2
fi

# Portable collection of deprecated keys into a temp file (key\tver)
DEP_FILE=$(mktemp); trap 'rm -f "$DEP_FILE" "$OVR_FILE"' EXIT
grep -n 'deprecated_since:' "$VALUES_FILE" | while read -r line; do
  ln=${line%%:*}
  keyLine=$(sed -n "1,${ln}p" "$VALUES_FILE" | tac | grep -m1 -E '^ {4}[A-Za-z0-9_.-]+:') || true
  [[ -z $keyLine ]] && continue
  key=$(echo "$keyLine" | sed -E 's/^ {4}([^:]+):.*/\1/')
  ver=$(echo "$line" | sed -E 's/.*deprecated_since:[[:space:]]*"?([0-9]+\.[0-9]+\.[0-9]+)"?.*/\1/')
  printf '%s\t%s\n' "$key" "$ver"
done > "$DEP_FILE"

# Map per-policy overrides for validationFailureAction to a temp file (key\tenforce)
OVR_FILE=$(mktemp)
awk '
  $0 ~ /^kyverno:/ { inK=1; next }
  inK && $0 ~ /^  policies:/ { inP=1; next }
  inK && inP {
    if ($0 ~ /^    [A-Za-z0-9._-]+:/) { gsub(/^ +/,"",$0); split($0,a,":"); cur=a[1]; next }
    if (tolower($0) ~ /validationfailureaction:[[:space:]]*enforce/) { print cur"\tenforce" }
  }
' "$VALUES_FILE" | sort -u > "$OVR_FILE" || true

violations=()
warnings=()

# Scan stub files
while IFS= read -r f; do
  [[ -z $f ]] && continue
  base=$(basename "$f" .yaml)
  # Consider only deprecated keys
  if ! grep -q "^${base}\t" "$DEP_FILE"; then continue; fi
  # content not needed; operate with grep for portability
  if grep -q 'autogenerated deprecated stub' "$f" || grep -q 'rulehub.deprecated:.*"true"' "$f"; then
    if grep -q 'kind: ClusterPolicy' "$f" && (grep -q 'rules: \[\]' "$f" || grep -q 'rules: \[]' "$f"); then
      # Kyverno stub
      if grep -q 'validationFailureAction:[[:space:]]*enforce' "$f"; then
        violations+=("file:$f declares enforce (stub)")
      fi
      if grep -q "^${base}\tenforce$" "$OVR_FILE"; then
        violations+=("values override enforce for stub key $base")
      fi
    elif grep -q 'kind: DeprecatedStubConstraint' "$f" || grep -q 'spec: {}' "$f"; then
      # Gatekeeper stub (no enforce concept; ignore)
      :
    fi
  fi
done < <(find files/kyverno files/gatekeeper -maxdepth 1 -type f -name '*.yaml' 2>/dev/null | sort)

# Warn on deprecated keys still enabled
while IFS=$'\t' read -r k ver; do
  [[ -z $k ]] && continue
  if grep -q "^    $k:" "$VALUES_FILE"; then
    # Extract block quickly and look for enabled: true
    if awk -v target="$k" '
      $0 ~ ("^    " target ":") { in=1; next }
      in && $0 ~ /^    [A-Za-z0-9._-]+:/ { in=0 }
      in && tolower($0) ~ /enabled:[[:space:]]*true/ { print "yes"; exit }
    ' "$VALUES_FILE" | grep -q yes; then
      warnings+=("deprecated key still enabled: $k")
    fi
  fi
done < "$DEP_FILE"

for w in "${warnings[@]:-}"; do [[ -n $w ]] && log "WARN: $w"; done

if ((${#violations[@]})); then
  echo "Stub enforcement violations detected:" >&2
  for v in "${violations[@]}"; do echo "  - $v" >&2; done
  exit 1
fi

log "Stub not-enforce verification OK"
exit 0
