#!/usr/bin/env bash
set -euo pipefail
# verify-soft-deletion.sh
# Verifies "soft deletion" lifecycle for deprecated policies replaced by stubs.
# Concept:
#   * After a policy key is marked deprecated (deprecated_since in values.yaml) the
#     original policy YAML MAY be replaced by an autogenerated stub (generated via
#     hack/generate-deprecated-stubs.sh) to preserve key presence without enforcing logic.
#   * A stub MUST NOT live indefinitely. After WINDOW (default: 2) minor releases
#     have elapsed since deprecated_since, the stub file and the values.yaml key
#     should be removed (full deletion phase handled / guarded by verify-deprecation-window.sh).
#   * This script focuses only on stub longevity â€“ it flags stubs whose deprecation
#     window has elapsed (distance >= WINDOW) as violations, prompting cleanup.
# Detection of stubs:
#   * Kyverno: apiVersion kyverno.io/v1, kind ClusterPolicy, annotation rulehub.deprecated: "true", rules list empty OR
#              file contains marker comment 'autogenerated deprecated stub'
#   * Gatekeeper: kind DeprecatedStubConstraint OR annotation rulehub.deprecated: "true" with empty spec {}
# Exit codes: 0 success, 1 violations, 2 usage error.

WINDOW_MINORS=2
VALUES_FILE="values.yaml"
QUIET=0

usage() {
  cat >&2 <<EOF
Usage: $0 [--values values.yaml] [--window N] [--quiet]
Checks that deprecated stub YAML files have not exceeded the soft deletion window (default: 2 minor versions).
EOF
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --values) VALUES_FILE=$2; shift 2;;
    --window) WINDOW_MINORS=$2; shift 2;;
    --quiet) QUIET=1; shift;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown arg: $1" >&2; usage; exit 2;;
  esac
done

log() { if [[ $QUIET -eq 0 ]]; then echo "$*"; fi }

if [[ ! -f $VALUES_FILE ]]; then
  echo "Values file not found: $VALUES_FILE" >&2; exit 2
fi

CHART_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
if [[ -z $CHART_VERSION ]]; then echo "Unable to determine Chart version" >&2; exit 2; fi

# minor distance helper (same semantics as verify-deprecation-window)
semver_minor_distance() {
  local current=$1 since=$2
  local cmj=${current%%.*}; local rest=${current#*.}; local cmi=${rest%%.*}
  local smj=${since%%.*}; local srest=${since#*.}; local smi=${srest%%.*}
  if [[ $cmj != $smj ]]; then
    if (( cmj > smj )); then echo 999; else echo 0; fi
  else
    echo $(( cmi - smi ))
  fi
}

# Collect deprecated_since versions from values.yaml (both frameworks) into a temp file key<TAB>ver
DEP_FILE=$(mktemp); trap 'rm -f "$DEP_FILE"' EXIT
yq -r '.gatekeeper.policies + .kyverno.policies | to_entries[] | select(.value.deprecated_since!=null) | [.key, .value.deprecated_since] | @tsv' "$VALUES_FILE" 2>/dev/null || true > "$DEP_FILE"

fail=0
count_checked=0

scan_stub_file() {
  local file=$1 key=$2 ver=$3
  ((count_checked++)) || true
  local distance; distance=$(semver_minor_distance "$CHART_VERSION" "$ver")
  if (( distance >= WINDOW_MINORS )); then
    echo "VIOLATION: stub beyond soft deletion window: $key (since $ver, distance=$distance >= $WINDOW_MINORS) -> remove stub & key" >&2
    fail=1
  elif (( distance == WINDOW_MINORS - 1 )); then
    log "INFO: stub enters final window: $key (since $ver, distance=$distance, removes after >= $WINDOW_MINORS)"
  else
    log "OK: stub within window: $key (since $ver, distance=$distance < $WINDOW_MINORS)"
  fi
}

# Iterate potential stub files (kyverno + gatekeeper)
while IFS= read -r f; do
  [[ -z $f ]] && continue
  base=$(basename "$f" .yaml)
  # Only consider if we have deprecated_since for that key (avoid non-zero grep under set -e)
  ver=$(awk -F '\t' -v k="$base" '$1==k{print $2; exit}' "$DEP_FILE" 2>/dev/null || true)
  [[ -z $ver ]] && continue
  # Detect stub characteristics
  if grep -q 'autogenerated deprecated stub' "$f" || \
     grep -q 'rulehub.deprecated:.*"true"' "$f"; then
    if grep -q 'kind: DeprecatedStubConstraint' "$f" || \
       grep -q 'rules: \[\]' "$f" || \
       grep -q 'spec: {}' "$f"; then
      scan_stub_file "$f" "$base" "$ver"
    fi
  fi
done < <(find files/kyverno files/gatekeeper -maxdepth 1 -type f -name '*.yaml' 2>/dev/null || true)

if (( count_checked == 0 )); then
  log "No stub files detected (nothing to verify)."
fi

if (( fail == 1 )); then
  exit 1
fi
log "Soft deletion verification OK (window=$WINDOW_MINORS)"
exit 0
