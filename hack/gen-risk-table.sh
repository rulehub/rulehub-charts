#!/usr/bin/env bash
set -euo pipefail
# Generate RISK_TABLE.md with columns: policy | framework | enforcement | risk | rationale
# Heuristic classification; refined with automatic Pod admission escalation.

ROOT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
OUT="$ROOT_DIR/RISK_TABLE.md"

high_kw_regex='(hostpath|privileged|affordability|self_exclusion|age_verification|kyc|aml_|sanctions|source_of_funds|player_funds|license_check|deposit_limit|loss_limit|session_time|reality_checks|rng_certification|geofencing|credit_card_gambling_ban|rto_rpo|encryption|hipaa|iso_27001|iec_62304|iec_62366|iso_14971|gdpr|vigilance|pms_psur|mfa_privileged_access|clinical|medical|phipa|dtac|fhir|blocking|sbom)'
medium_kw_regex='(resource|retention|logging|audit|transparency|consent|prohibited_services|data_integrity|complaints|monitoring|spin_speed|autoplay|spin_speed|rtp_disclosure|market_restrictions|spin_speed|usability)'

printf '# Risk & Impact Table\n\n' >"$OUT"
printf 'Heuristic risk classification generated by hack/gen-risk-table.sh (manual review recommended).\n\n' >>"$OUT"
printf '| Policy Key | Framework | Enforcement | Risk | Rationale |\n' >>"$OUT"
printf '|------------|-----------|------------|------|-----------|\n' >>"$OUT"

add_row() {
  local key framework enforcement risk rationale override_risk override_rationale
  key="$1"; framework="$2"; enforcement="$3"; override_risk="${4:-}"; override_rationale="${5:-}"
  local name_lc
  name_lc="${key,,}"
  if [[ -n $override_risk ]]; then
    risk="$override_risk"
    rationale="$override_rationale"
  elif [[ $name_lc =~ $high_kw_regex ]]; then
    risk=High
    rationale='High-impact security or regulatory control'
  elif [[ $name_lc =~ $medium_kw_regex ]]; then
    risk=Medium
    rationale='Moderate impact compliance / operational control'
  else
    risk=Low
    rationale='Advisory / hygiene control'
  fi
  printf '| %s | %s | %s | %s | %s |\n' "$key" "$framework" "$enforcement" "$risk" "$rationale" >>"$OUT"
}

# Kyverno policies
for f in $(ls -1 "$ROOT_DIR/files/kyverno"/*.yaml 2>/dev/null | sort); do
  base=$(basename "$f" .yaml)
  enf=$(awk '/validationFailureAction:/ {print $2; exit}' "$f" || true)
  if [[ -z "$enf" ]]; then
    enf='(file-default)'
  fi
  # Automatic Pod admission escalation: if the policy matches Pod resources -> High
  if grep -qE '\bPod\b' "$f"; then
    add_row "$base" Kyverno "$enf" High 'Pod admission control'
  else
    add_row "$base" Kyverno "$enf"
  fi
done

# Gatekeeper constraints (treat as enforce)
for f in $(ls -1 "$ROOT_DIR/files/gatekeeper"/*.yaml 2>/dev/null | sort); do
  base=$(basename "$f" .yaml)
  if grep -qE '\bPod\b' "$f"; then
    add_row "$base" Gatekeeper enforce High 'Pod admission control'
  else
    add_row "$base" Gatekeeper enforce
  fi
done

echo "Generated $OUT" >&2
