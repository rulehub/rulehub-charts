## Synthetic aggregation template for tests (not applied cluster-wide)
# Treat "enabled" as true ONLY when it's a boolean true. Strings like "true" are not accepted.
{{ $kyEnabled := and (kindIs "bool" .Values.kyverno.enabled) .Values.kyverno.enabled -}}
{{ $gkEnabled := and (kindIs "bool" .Values.gatekeeper.enabled) .Values.gatekeeper.enabled -}}

{{- /* Collect only explicitly boolean-true policy toggles (skip when useProfilesOnly=true to mirror render loop) */ -}}
{{- $kyPolicies := dict -}}
{{- if and .Values.kyverno (not (.Values.kyverno.useProfilesOnly | default false)) .Values.kyverno.policies -}}
  {{- range $n, $c := .Values.kyverno.policies -}}
    {{- $pEnabled := and $c (hasKey $c "enabled") (kindIs "bool" (get $c "enabled")) (get $c "enabled") -}}
    {{- if $pEnabled -}}{{- $_ := set $kyPolicies $n (dict) -}}{{- end -}}
  {{- end -}}
{{- end -}}
{{- $gkPolicies := dict -}}
{{- if and .Values.gatekeeper .Values.gatekeeper.policies -}}
  {{- range $n, $c := .Values.gatekeeper.policies -}}
    {{- $pEnabled := and $c (hasKey $c "enabled") (kindIs "bool" (get $c "enabled")) (get $c "enabled") -}}
    {{- if $pEnabled -}}{{- $_ := set $gkPolicies $n (dict) -}}{{- end -}}
  {{- end -}}
{{- end -}}

{{- /* Build spec conditionally: include kyverno/gatekeeper sections only when enabled (or policies present) */ -}}
{{- $spec := dict -}}
{{- if or $kyEnabled (gt (len $kyPolicies) 0) -}}
  {{- $kyBlock := dict "enabled" $kyEnabled -}}
  {{- if gt (len $kyPolicies) 0 -}}{{- $_ := set $kyBlock "policies" $kyPolicies -}}{{- end -}}
  {{- $_ := set $spec "kyverno" $kyBlock -}}
{{- end -}}
{{- if or $gkEnabled (gt (len $gkPolicies) 0) -}}
  {{- $gkBlock := dict "enabled" $gkEnabled -}}
  {{- if gt (len $gkPolicies) 0 -}}{{- $_ := set $gkBlock "policies" $gkPolicies -}}{{- end -}}
  {{- $_ := set $spec "gatekeeper" $gkBlock -}}
{{- end -}}

{{- $meta := dict "name" "policy-sets-summary" -}}
{{- $_ := set $meta "labels" (dict "chart/version" .Chart.Version) -}}
{{- /* Inject build annotations when provided */ -}}
{{- $anns := dict -}}
{{- if and .Values.build .Values.build.integritySha256 (ne (.Values.build.integritySha256 | toString) "") -}}
  {{- $_ := set $anns "policy-sets/build.integrity.sha256" (.Values.build.integritySha256 | toString) -}}
{{- end -}}
{{- if and .Values.build .Values.build.commitSha (ne (.Values.build.commitSha | toString) "") -}}
  {{- $_ := set $anns "policy-sets/build.commit" (.Values.build.commitSha | toString) -}}
{{- end -}}
{{- if and .Values.build .Values.build.timestamp (ne (.Values.build.timestamp | toString) "") -}}
  {{- $_ := set $anns "policy-sets/build.timestamp" (.Values.build.timestamp | toString) -}}
{{- end -}}
{{- if gt (len $anns) 0 -}}
  {{- $_ := set $meta "annotations" $anns -}}
{{- end -}}
---
{{ toYaml (dict "apiVersion" "policy-sets.test/v1" "kind" "PolicySets" "metadata" $meta "spec" $spec) }}
